buildscript {
    // Dependencies of this build script (not of the project we are building):
    // A Gradle plug-in we will use later to download the JOSM binary.
    // Fetch it from Maven Central.
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

// We use the Java builder and the download plug-in we just fetched.
apply plugin: "java"
apply plugin: 'download-task'
apply plugin: "eclipse"

// For the dependencies of our project (not of this build script itself), we also need the
// local Maven cache. We use it to get the MATSim snapshot.
repositories {
    mavenCentral()
}

// Declare a configuration for our external dependency (MATSim) so we can later take its classes and zip them into our jar.
configurations {
    provided
    compile.extendsFrom(provided)
}

dependencies {
    // We also include the JOSM jar, which will be downloaded below. But it will not go into the jar.
    // Should rather be 'provided', see https://issues.gradle.org/browse/GRADLE-784
    provided files("libs/josm-latest.jar")
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


// I (michaz) seem to need this when debugging from IntelliJ.
// With the default setting (build/resources/main),
// resources are not found on the classpath.
sourceSets {
    main {
        output.resourcesDir = "build/classes/main"
    }
    test{
        java {
            srcDir "src/test/java/LibraryTest"
        }
    }

}

jar.baseName = "lanes-signals-validator"
jar {
    metaInf {
        from("resources") {
            include "mime.types"
        }
    }
    // Put in the manifest entries which are required for a JOSM plug-in.
    manifest {
        attributes(
                "Plugin-Date": new Date().format("yyyy-MM-dd HH:mm"),
                "Plugin-Version": "v0.7.448",
                "Plugin-Mainversion": 12039,
                "Created-By": System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                "Author" : "Patryk Mikulski",
                "Plugin-Class" : "org.openstreetmap.josm.plugins.lanes_and_traffic_signals_validation.LanesTrafficSignalsValidationPlugin",
                "Plugin-Description": "Gradle: lanes and signals validation",
        )
    }
    // Now take the dependencies of zipIntoJar (currently only MATSim), and put them into
    // our target jar.

}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// Download the JOSM binary and put it into its place.
project.ext.josmUrl = "http://josm.openstreetmap.de/josm-latest.jar"
task getJosm {
    description = "Download the latest JOSM build jar from the JOSM website"
    doLast {
        if (!file("libs").exists()) {
            file("libs").mkdir()
        }
        if (!file("libs/josm-latest.jar").exists()) {
            download {
                src project.ext.josmUrl
                dest 'libs'
            }
        }
    }
}
compileJava.dependsOn "getJosm"

// Install the plug-in into the local JOSM plug-in directory.
// You can start JOSM from your IDE and debug the plug-in, but the JOSM
// plug-in system still expects the plug-in jar in its correct place.
import org.apache.tools.ant.taskdefs.condition.Os
task installLocalJosm {
    doLast {
        def josmPluginDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def appDataDir = System.getenv("APPDATA")
            josmPluginDir = appDataDir + "/JOSM/plugins"
        } else {
            def homePath = System.properties['user.home']
            josmPluginDir = homePath + "/Library/JOSM/plugins"
        }
        ant.copy(todir: josmPluginDir) {
            fileset(dir: "build/libs") {
                include(name: "lanes-signals-validator.jar")
            }
        }
    }
}
installLocalJosm.dependsOn "jar"

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

task runJosm(type: JavaExec) {
    classpath = configurations.compile
    main = 'org.openstreetmap.josm.gui.MainApplication'
}